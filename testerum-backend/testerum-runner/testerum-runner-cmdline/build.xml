<?xml version="1.0"?>
<project name="testerum-package" basedir=".">

    <!--======================================== properties ========================================-->

    <property name="src.base_url" value="https://nodejs.org/dist" />
    <property name="src.version"  value="${testerumNodeVersion}" />

    <property name="src.filename_without_extension.windows" value="node-${src.version}-win-x64" />
    <property name="src.filename_without_extension.mac"     value="node-${src.version}-darwin-x64" />
    <property name="src.filename_without_extension.linux"   value="node-${src.version}-linux-x64" />

    <property name="node_dir"                      location="src/main/assembly/node" />
    <property name="dest.download_dir"             location="${node_dir}/download" />
    <property name="dest.node_package_dir.windows" location="${node_dir}/windows" />
    <property name="dest.node_package_dir.mac"     location="${node_dir}/mac" />
    <property name="dest.node_package_dir.linux"   location="${node_dir}/linux" />

    <property name="package_dir_runner"      location="../../../package/runner/" />

    <property name="app_dirs.pretty_app"       location="src/main/assembly/report_templates/templates/pretty/app/" />
    <property name="app_dirs.pretty_generator" location="src/main/assembly/report_templates/templates/pretty/generator/" />
    <property name="app_dirs.stats_app"        location="src/main/assembly/report_templates/templates/stats/app/" />
    <property name="app_dirs.stats_generator"  location="src/main/assembly/report_templates/templates/stats/generator/" />

    <!-- node_package_dir.current_os -->
    <condition property="node_package_dir.current_os" value="${dest.node_package_dir.windows}">
        <os family="windows" />
    </condition>

    <condition property="node_package_dir.current_os" value="${dest.node_package_dir.mac}">
        <os family="mac" />
    </condition>

    <condition property="node_package_dir.current_os" value="${dest.node_package_dir.linux}">
        <os family="unix" />
    </condition>

    <!-- node binary -->
    <condition property="node_binary.current_os" value="${dest.node_package_dir.windows}/node.exe">
        <os family="windows" />
    </condition>

    <condition property="node_binary.current_os" value="${dest.node_package_dir.mac}/node">
        <os family="mac" />
    </condition>

    <condition property="node_binary.current_os" value="${dest.node_package_dir.linux}/node">
        <os family="unix" />
    </condition>

    <!-- npm-cli.js -->
    <condition property="npm_cli_js.current_os" value="${dest.node_package_dir.windows}/node_modules/npm/bin/npm-cli.js">
        <os family="windows" />
    </condition>

    <condition property="npm_cli_js.current_os" value="${dest.node_package_dir.mac}/node_modules/npm/bin/npm-cli.js">
        <os family="mac" />
    </condition>

    <condition property="npm_cli_js.current_os" value="${dest.node_package_dir.linux}/node_modules/npm/bin/npm-cli.js">
        <os family="unix" />
    </condition>

    <!-- conditions to build or not the node apps -->
    <condition property="pretty-app.should_not_build">
        <available file="${app_dirs.pretty_app}/dist/" type="dir" />
    </condition>
    <condition property="pretty-generator.should_not_build">
        <available file="${app_dirs.pretty_generator}/dist/" type="dir" />
    </condition>
    <condition property="stats-app.should_not_build">
        <available file="${app_dirs.stats_app}/dist/" type="dir" />
    </condition>
    <condition property="stats-generator.should_not_build">
        <available file="${app_dirs.stats_generator}/dist/" type="dir" />
    </condition>

    <!-- conditions to extract downloaded node -->
    <condition property="extract-node-windows.should_not_build">
        <available file="${dest.node_package_dir.windows}/node.exe" type="file" />
    </condition>
    <condition property="extract-node-mac.should_not_build">
        <available file="${dest.node_package_dir.mac}/node" type="file" />
    </condition>
    <condition property="extract-node-linux.should_not_build">
        <available file="${dest.node_package_dir.linux}/node" type="file" />
    </condition>



    <!--======================================== targets ========================================-->

    <target name="main-dev"  depends="main-prod, copy-to-dev-package-dir" />

    <target name="main-prod" depends="download-node, extract-node, build-runner-reports" />

    <target name="download-node">
        <mkdir dir="${dest.download_dir}" />
        <get src="${src.base_url}/${src.version}/${src.filename_without_extension.windows}.zip"  dest="${dest.download_dir}/${src.filename_without_extension.windows}.zip"  skipexisting="true" />
        <get src="${src.base_url}/${src.version}/${src.filename_without_extension.mac}.tar.gz"   dest="${dest.download_dir}/${src.filename_without_extension.mac}.tar.gz"   skipexisting="true" />
        <get src="${src.base_url}/${src.version}/${src.filename_without_extension.linux}.tar.gz" dest="${dest.download_dir}/${src.filename_without_extension.linux}.tar.gz" skipexisting="true" />
    </target>

    <target name="extract-node">
        <antcall target="extract-node-windows" />
        <antcall target="extract-node-mac" />
        <antcall target="extract-node-linux" />
    </target>

    <target name="extract-node-windows" unless="extract-node-windows.should_not_build">
        <mkdir dir="${dest.node_package_dir.windows}" />
        <unzip src="${dest.download_dir}/${src.filename_without_extension.windows}.zip" dest="${dest.node_package_dir.windows}">
            <patternset>
                <include name="${src.filename_without_extension.windows}/node.exe" />
                <include name="${src.filename_without_extension.windows}/node_modules/**/*" />
                <include name="${src.filename_without_extension.windows}/LICENSE" />
            </patternset>
            <mapper>
                <globmapper from="${src.filename_without_extension.windows}/*" to="*"/>
            </mapper>
        </unzip>
    </target>

    <target name="extract-node-mac" unless="extract-node-mac.should_not_build">
        <mkdir dir="${dest.node_package_dir.mac}" />
        <untar src="${dest.download_dir}/${src.filename_without_extension.mac}.tar.gz" compression="gzip" dest="${dest.node_package_dir.mac}">
            <patternset>
                <include name="${src.filename_without_extension.mac}/bin/node" />
                <include name="${src.filename_without_extension.mac}/lib/node_modules/**/*" />
                <include name="${src.filename_without_extension.mac}/LICENSE" />
            </patternset>
            <mapper>
                <globmapper from="${src.filename_without_extension.mac}/bin/*" to="*"/>
                <globmapper from="${src.filename_without_extension.mac}/lib/*" to="*"/>
                <globmapper from="${src.filename_without_extension.mac}/*" to="*"/>
            </mapper>
        </untar>
        <chmod file="${dest.node_package_dir.mac}/node" perm="ugo+rx"/>
    </target>

    <target name="extract-node-linux" unless="extract-node-linux.should_not_build">
        <mkdir dir="${dest.node_package_dir.linux}" />
        <untar src="${dest.download_dir}/${src.filename_without_extension.linux}.tar.gz" compression="gzip" dest="${dest.node_package_dir.linux}">
            <patternset>
                <include name="${src.filename_without_extension.linux}/bin/node" />
                <include name="${src.filename_without_extension.linux}/lib/node_modules/**/*" />
                <include name="${src.filename_without_extension.linux}/LICENSE" />
            </patternset>
            <mapper>
                <globmapper from="${src.filename_without_extension.linux}/bin/*" to="*"/>
                <globmapper from="${src.filename_without_extension.linux}/lib/*" to="*"/>
                <globmapper from="${src.filename_without_extension.linux}/*" to="*"/>
            </mapper>
        </untar>
        <chmod file="${dest.node_package_dir.linux}/node" perm="ugo+rx"/>
    </target>

    <target name="copy-to-dev-package-dir">
        <antcall target="copy-to-dev-package-dir.extracted-node" />
        <antcall target="copy-to-dev-package-dir.shell-scripts" />
        <antcall target="copy-to-dev-package-dir.pretty-generator" />
        <antcall target="copy-to-dev-package-dir.stats-generator" />
    </target>

    <target name="copy-to-dev-package-dir.extracted-node">
        <mkdir dir="${package_dir_runner}/node/"/>
        <copy todir="${package_dir_runner}/node/">
            <fileset dir="${node_package_dir.current_os}">
                <exclude name="node_modules/**"/>
            </fileset>
        </copy>
        <chmod file="${package_dir_runner}/node/node" perm="ugo+rx" />
    </target>

    <target name="copy-to-dev-package-dir.shell-scripts">
        <mkdir dir="${package_dir_runner}" />
        <copy todir="${package_dir_runner}">
            <fileset dir="src/main/assembly/package" />
        </copy>
        <chmod dir="${package_dir_runner}/bin/" includes="**/*.sh" perm="ugo+rx" />
    </target>

    <target name="copy-to-dev-package-dir.pretty-generator">
        <mkdir dir="${package_dir_runner}/report_templates/pretty" />
        <copy todir="${package_dir_runner}/report_templates/pretty">
            <fileset dir="src/main/assembly/report_templates/templates/pretty/generator/dist" />
        </copy>
    </target>

    <target name="copy-to-dev-package-dir.stats-generator">
        <mkdir dir="${package_dir_runner}/report_templates/stats" />
        <copy todir="${package_dir_runner}/report_templates/stats">
            <fileset dir="src/main/assembly/report_templates/templates/stats/generator/dist" />
        </copy>
    </target>

    <target name="build-runner-reports">
        <antcall target="build-runner-pretty-app" />
        <antcall target="build-runner-pretty-generator" />
        <antcall target="build-runner-stats-app" />
        <antcall target="build-runner-stats-generator" />
    </target>

    <target name="build-runner-pretty-app" unless="pretty-app.should_not_build">
        <local name="current_dir"/>
        <property name="current_dir" value="${app_dirs.pretty_app}"/>

        <antcall target="npm">
            <param name="args"        value="install" />
            <param name="current_dir" value="${current_dir}" />
        </antcall>
        <antcall target="npm">
            <param name="args"        value="run build-prod" />
            <param name="current_dir" value="${current_dir}" />
        </antcall>
    </target>

    <target name="build-runner-pretty-generator" unless="pretty-generator.should_not_build">
        <local name="current_dir"/>
        <property name="current_dir" value="${app_dirs.pretty_generator}"/>

        <antcall target="npm">
            <param name="args"        value="install" />
            <param name="current_dir" value="${current_dir}" />
        </antcall>
        <antcall target="npm">
            <param name="args"        value="run build-prod" />
            <param name="current_dir" value="${current_dir}" />
        </antcall>
        <antcall target="npm">
            <param name="args"        value="install --only=production" />
            <param name="current_dir" value="${app_dirs.pretty_generator}/dist/" />
        </antcall>
    </target>

    <target name="build-runner-stats-app" unless="stats-app.should_not_build">
        <local name="current_dir"/>
        <property name="current_dir" value="${app_dirs.stats_app}"/>

        <antcall target="npm">
            <param name="args"        value="install" />
            <param name="current_dir" value="${current_dir}" />
        </antcall>
        <antcall target="npm">
            <param name="args"        value="run build-prod" />
            <param name="current_dir" value="${current_dir}" />
        </antcall>
    </target>

    <target name="build-runner-stats-generator" unless="stats-generator.should_not_build">
        <local name="current_dir"/>
        <property name="current_dir" value="${app_dirs.stats_generator}"/>

        <antcall target="npm">
            <param name="args"        value="install" />
            <param name="current_dir" value="${current_dir}" />
        </antcall>
        <antcall target="npm">
            <param name="args"        value="run build-prod" />
            <param name="current_dir" value="${current_dir}" />
        </antcall>
        <antcall target="npm">
            <param name="args"        value="install --only=production" />
            <param name="current_dir" value="${app_dirs.stats_generator}/dist/" />
        </antcall>
    </target>

    <!--
        npm

        required params:
        - args
        - current_dir
    -->
    <target name="npm">
        <echo message="running [npm ${args}] in [${current_dir}]"/>
        <exec executable="${node_binary.current_os}" dir="${current_dir}">
            <arg line='"${npm_cli_js.current_os}" --scripts-prepend-node-path=true ${args}'/>
        </exec>
    </target>

</project>

