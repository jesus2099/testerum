import {EventEmitter, Injectable} from "@angular/core";
import {RunnerConfig} from "./model/runner-config.model";
import {RunnerService} from "../../../service/runner.service";
import {ArrayUtil} from "../../../utils/array.util";

@Injectable()
export class RunnerConfigService {

    selectedRunners: Array<RunnerConfig> = [];
    runners: Array<RunnerConfig> = [];

    selectedRunnerEventEmitter: EventEmitter<Array<RunnerConfig>> = new EventEmitter<Array<RunnerConfig>>();
    refreshConfigListEventEmitter: EventEmitter<void> = new EventEmitter<void>();

    setRunners(runners: Array<RunnerConfig>) {
        this.runners.length = 0;
        for (const runner of runners) {
            this.runners.push(runner);
        }
    }

    setSelectedRunner(selectedRunners: Array<RunnerConfig>|null) {
        this.selectedRunners = selectedRunners;
        this.selectedRunnerEventEmitter.emit(selectedRunners);
    }

    addNewRunnerConfig() {
        let runnerConfig = new RunnerConfig();
        runnerConfig.name = this.generateRunnerConfigName("Unnamed");
        this.runners.push(runnerConfig);

        this.setSelectedRunner([runnerConfig]);
    }

    private generateRunnerConfigName(namePrefix: string): string {
        let index = 0;

        let uniqueName;
        let isNameUnique = false;
        do {
            uniqueName = index == 0 ? namePrefix : namePrefix + " (" + index + ")";
            isNameUnique = this.isNameUnique(uniqueName);
            index++;
        } while (!isNameUnique);

        return uniqueName;
    }

    private isNameUnique(nameToCheck: string): boolean {
        for (const runner of this.runners) {
            if (runner.name === nameToCheck) {
                return false
            }
        }
        return true;
    }

    removeSelectedRunnerConfig() {
        if (!this.areRunnersSelected()) { return; }
        
        for (const selectedRunner of this.selectedRunners) {
            ArrayUtil.removeElementFromArray(this.runners, selectedRunner);
        }
        this.selectedRunners.length = 0;
        this.selectedRunnerEventEmitter.emit(this.selectedRunners);
    }

    areRunnersSelected(): boolean {
        return this.selectedRunners.length > 0;
    }

    isOnlyOneRunnerSelected(): boolean {
        return this.selectedRunners.length == 1;
    }

    copyConfiguration() {
        if (!this.areRunnersSelected()) { return; }

        let selectedRunner = this.selectedRunners[0];
        let runnerConfigCopy = selectedRunner.clone();
        let nameWithoutAutogeneratedIndex = selectedRunner.name.replace(/ \(\d+\)$/, "");
        runnerConfigCopy.name = this.generateRunnerConfigName(nameWithoutAutogeneratedIndex);
        this.runners.push(runnerConfigCopy);

        this.setSelectedRunner([runnerConfigCopy]);
    }

    isRunnerConfigSelectedAndNotTheFirstItem(): boolean {
        return this.isOnlyOneRunnerSelected() && this.selectedRunners[0] != this.runners[0];
    }

    isRunnerConfigSelectedAndNotTheLastItem(): boolean {
        return this.isOnlyOneRunnerSelected() && this.selectedRunners[0] != this.runners[this.runners.length - 1];
    }

    moveUp() {
        if (!this.isRunnerConfigSelectedAndNotTheFirstItem()) { return; }
        let selectedItem = this.selectedRunners[0];
        let itemIndexInRunners = this.runners.indexOf(selectedItem);

        let tempUpperItem = this.runners[itemIndexInRunners - 1];
        this.runners[itemIndexInRunners - 1] = this.runners[itemIndexInRunners];
        this.runners[itemIndexInRunners] = tempUpperItem;
    }

    moveDown() {
        if (!this.isRunnerConfigSelectedAndNotTheLastItem()) { return; }
        let selectedItem = this.selectedRunners[0];
        let itemIndexInRunners = this.runners.indexOf(selectedItem);

        let tempLowerItem = this.runners[itemIndexInRunners + 1];
        this.runners[itemIndexInRunners + 1] = this.runners[itemIndexInRunners];
        this.runners[itemIndexInRunners] = tempLowerItem;
    }

    getRunnerConfigByName(runnerConfigName: string): RunnerConfig|null {
        for (const runner of this.runners) {
            if (runner.name === runnerConfigName) {
                return runner;
            }
        }
        return null;
    }
}
